
from tf import *
from db import *
from gd import * 
from datetime import datetime
import pandas as pd
from sqlalchemy import create_engine

querys_productos = {
    "SIAG": {
    "PRODUCTOS_SIAG_CLTS_ACTIVOS":"""
    WITH CLIENTES_ACTIVOS AS (
		SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
			FROM ( 
		    	SELECT *
		    	FROM GIA.GIA_GARANTIAS 
		    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
				) RESULTADO
			INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
		), CON_SUBPRODUCTOS AS(
			SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
			FROM CLIENTES_ACTIVOS CA
			LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
		), INFORMACION_GARANTIA AS (
			SELECT 
			CLAVE NUMERO_DE_GARANTIA,
			INTER_CLAVE NUMERO_CLIENTE,
			CLIENTE,
			DESC_CORTA,
			SUBPRODUCTO,
			FECHA_REGISTRO_GARANTIA,
			MONTO_CREDITO,
			PORCENTAJE_GARANTIZADO,
			MONTO_GARANTIZADO,
			TASA_INTERES,
			PORCENTAJE_COMISION,
			ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
			EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) AIO,
			EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
			EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
		  FROM CON_SUBPRODUCTOS
		) SELECT * FROM INFORMACION_GARANTIA
    """, 
    
    "AGRUPADO_ANUAL_GARANTIAS": """
        WITH CLIENTES_ACTIVOS AS (
			SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
				FROM ( 
			    	SELECT *
			    	FROM GIA.GIA_GARANTIAS 
			    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R'
					) RESULTADO
				INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
			), CON_SUBPRODUCTOS AS(
				SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
				FROM CLIENTES_ACTIVOS CA
				LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
			), INFORMACION_GARANTIA AS (
				SELECT 
				CLAVE NUMERO_DE_GARANTIA,
				INTER_CLAVE NUMERO_CLIENTE,
				CLIENTE,
				DESC_CORTA,
				SUBPRODUCTO,
				FECHA_REGISTRO_GARANTIA,
				MONTO_CREDITO,
				PORCENTAJE_GARANTIZADO,
				MONTO_GARANTIZADO,
				TASA_INTERES,
				PORCENTAJE_COMISION,
				ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
				EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) "AÑO",
				EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
				EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
			  FROM CON_SUBPRODUCTOS
			), TAB_FINAL AS (
				SELECT 
			        "AÑO",
			        COUNT(DISTINCT(NUMERO_CLIENTE)) AS NUMERO_INTERMEDIARIOS_ANUAL,
			        COUNT(*) AS "GARANTIAS_X_AÑO",
			        ROUND(COUNT(*)/COUNT(DISTINCT(NUMERO_CLIENTE)), 2) PROMEDIO_ANUAL_GARANTIAS_X_INTERMEDARIO,
			        ROUND(SUM(MONTO_GARANTIZADO)) AS SUMA_ANUAL_MONTO_GARANTIZADO,
			        ROUND(AVG(MONTO_GARANTIZADO)) AS PROMEDIO_ANUAL_MONTO_GARANTIZADO_X_GARANTIA,
			        SUM(GANANCIA) AS TOTAL_ANUAL_GANANCIA,
			        ROUND(AVG(PORCENTAJE_COMISION),4) PROMEDIO_ANUAL_COMISION
			    FROM INFORMACION_GARANTIA
			    GROUP BY "AÑO"
			)SELECT * FROM TAB_FINAL ORDER BY "AÑO" DESC
    """,
    
    "COMISIONES_PAGADAS_INTER_GAR_ACT":"""
    	WITH CLIENTES_ACTIVOS AS (
		SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
			FROM ( 
		    	SELECT *
		    	FROM GIA.GIA_GARANTIAS 
		    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
				) RESULTADO
			INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
		), CON_SUBPRODUCTOS AS(
			SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
			FROM CLIENTES_ACTIVOS CA
			LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
		), INFORMACION_GARANTIA AS (
			SELECT 
			CLAVE NUMERO_DE_GARANTIA,
			INTER_CLAVE NUMERO_CLIENTE,
			CLIENTE,
			DESC_CORTA,
			SUBPRODUCTO,
			FECHA_REGISTRO_GARANTIA,
			MONTO_CREDITO,
			PORCENTAJE_GARANTIZADO,
			MONTO_GARANTIZADO,
			TASA_INTERES,
			PORCENTAJE_COMISION,
			ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
			EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) AIO,
			EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
			EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
		  FROM CON_SUBPRODUCTOS
		), TABLA_FINAL AS (
			SELECT 
			CLIENTE,
			SUM(GANANCIA) AS COMISIONES_PAGADAS_X_INTERMEDIARIO,
			COUNT(*) NUMERO_GARANTIAS_ACTIVAS_X_INTERMEDIARIO,
			ROUND(AVG(PORCENTAJE_COMISION),2) AS PROMEDIO_COMISION_X_INTER,
			ROUND(SUM(MONTO_GARANTIZADO)) AS TOTAL_MONTO_GARANTIZADOS
			FROM INFORMACION_GARANTIA
			GROUP BY CLIENTE
		) SELECT * FROM TABLA_FINAL ORDER BY COMISIONES_PAGADAS_X_INTERMEDIARIO DESC
	    """,
	"AGRUPAMIENTO_CLIENTES_AÑO":"""
	WITH CLIENTES_ACTIVOS AS (
		SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
			FROM ( 
		    	SELECT *
		    	FROM GIA.GIA_GARANTIAS 
		    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
				) RESULTADO
			INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
		), CON_SUBPRODUCTOS AS(
			SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
			FROM CLIENTES_ACTIVOS CA
			LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
		), INFORMACION_GARANTIA AS (
			SELECT 
			CLAVE NUMERO_DE_GARANTIA,
			INTER_CLAVE NUMERO_CLIENTE,
			CLIENTE,
			DESC_CORTA,
			SUBPRODUCTO,
			FECHA_REGISTRO_GARANTIA,
			MONTO_CREDITO,
			PORCENTAJE_GARANTIZADO,
			MONTO_GARANTIZADO,
			TASA_INTERES,
			PORCENTAJE_COMISION,
			ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
			EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) "AÑO",
			EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
			EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
		  FROM CON_SUBPRODUCTOS
		), TAB_FINAL AS (
			SELECT 
		    "AÑO",
		    CLIENTE,
		    COUNT(NUMERO_DE_GARANTIA) AS NUMERO_DE_GARANTIAS,
		    SUM(MONTO_GARANTIZADO) AS TOTAL_MONTO_GARANTIZADO,
		    ROUND(AVG(MONTO_GARANTIZADO)) PROMEDIO_MONTO_GARANTIZADO,
		    ROUND(AVG(PORCENTAJE_COMISION),4) PROMEDIO_COMISION,
		    SUM(GANANCIA) AS PAGO_COMISION_CLIENTE
			FROM INFORMACION_GARANTIA
			GROUP BY "AÑO", CLIENTE
			ORDER BY "AÑO"
		) SELECT * FROM TAB_FINAL
 	""",
	"AGRUPAMIENTO_CLIENTES_AÑO_MES": """
		 	WITH CLIENTES_ACTIVOS AS (
		SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
			FROM ( 
		    	SELECT *
		    	FROM GIA.GIA_GARANTIAS 
		    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
				) RESULTADO
			INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
		), CON_SUBPRODUCTOS AS(
			SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
			FROM CLIENTES_ACTIVOS CA
			LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
		), INFORMACION_GARANTIA AS (
			SELECT 
			CLAVE NUMERO_DE_GARANTIA,
			INTER_CLAVE NUMERO_CLIENTE,
			CLIENTE,
			DESC_CORTA,
			SUBPRODUCTO,
			FECHA_REGISTRO_GARANTIA,
			MONTO_CREDITO,
			PORCENTAJE_GARANTIZADO,
			MONTO_GARANTIZADO,
			TASA_INTERES,
			PORCENTAJE_COMISION,
			ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
			EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) "AÑO",
			EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
			EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
		  FROM CON_SUBPRODUCTOS
		), TAB_FINAL AS (
			SELECT 
		    "AÑO",
		    MES,
		    CLIENTE,
		    COUNT(NUMERO_DE_GARANTIA) AS NUMERO_DE_GARANTIAS,
		    SUM(MONTO_GARANTIZADO) AS TOTAL_MONTO_GARANTIZADO,
		    ROUND(AVG(MONTO_GARANTIZADO)) PROMEDIO_MONTO_GARANTIZADO,
		    ROUND(AVG(PORCENTAJE_COMISION),4) PROMEDIO_COMISION,
		    SUM(GANANCIA) AS PAGO_COMISION_CLIENTE,
		    MAX(MONTO_GARANTIZADO) AS MONTO_MAXIMO_GARANTIZADO,
		    MIN(MONTO_GARANTIZADO) AS MONTO_MINIMO_GARANTIZADO
			FROM INFORMACION_GARANTIA
			GROUP BY "AÑO", MES, CLIENTE
			ORDER BY "AÑO"
		) SELECT * FROM TAB_FINAL
  	""",
    "AÑOS_GARANTIAS": """
	    WITH CLIENTES_ACTIVOS AS (
			SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
				FROM ( 
			    	SELECT *
			    	FROM GIA.GIA_GARANTIAS 
			    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
					) RESULTADO
				INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
			), CON_SUBPRODUCTOS AS(
				SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
				FROM CLIENTES_ACTIVOS CA
				LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
			), INFORMACION_GARANTIA AS (
				SELECT 
				CLAVE NUMERO_DE_GARANTIA,
				INTER_CLAVE NUMERO_CLIENTE,
				CLIENTE,
				DESC_CORTA,
				SUBPRODUCTO,
				FECHA_REGISTRO_GARANTIA,
				MONTO_CREDITO,
				PORCENTAJE_GARANTIZADO,
				MONTO_GARANTIZADO,
				TASA_INTERES,
				PORCENTAJE_COMISION,
				ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
				EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) AIO,
				EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
				EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
			  FROM CON_SUBPRODUCTOS
			) SELECT DISTINCT(AIO) FROM INFORMACION_GARANTIA ORDER BY AIO DESC
    """
    }
}


def query_mensual_x_año(año:int):
    return f""" 
        WITH CLIENTES_ACTIVOS AS (
			SELECT RESULTADO.*, INT.DESCRIPCION AS CLIENTE, INT.DESC_CORTA  
				FROM ( 
			    	SELECT *
			    	FROM GIA.GIA_GARANTIAS 
			    	WHERE ESTATUS_GARANTIA IS NULL OR ESTATUS_GARANTIA = 'R' AND (FECHA_VENCIMIENTO IS NULL)
					) RESULTADO
				INNER JOIN GIA.GIA_INTERMEDIARIOS INT ON RESULTADO.INTER_CLAVE = INT.CLAVE
			), CON_SUBPRODUCTOS AS(
				SELECT CA.*, SP.DESCRIPCION AS SUBPRODUCTO
				FROM CLIENTES_ACTIVOS CA
				LEFT JOIN GIA.SIAG_PORTAFOLIOS SP ON CA.CVE_CARTERA = SP.CVE_CARTERA AND CA.CVE_PORTAFOLIO = SP.CVE_PORTAFOLIO 
			), INFORMACION_GARANTIA AS (
				SELECT 
				CLAVE NUMERO_DE_GARANTIA,
				INTER_CLAVE NUMERO_CLIENTE,
				CLIENTE,
				DESC_CORTA,
				SUBPRODUCTO,
				FECHA_REGISTRO_GARANTIA,
				MONTO_CREDITO,
				PORCENTAJE_GARANTIZADO,
				MONTO_GARANTIZADO,
				TASA_INTERES,
				PORCENTAJE_COMISION,
				ROUND(MONTO_CREDITO * (PORCENTAJE_COMISION/100)) GANANCIA,
				EXTRACT(YEAR FROM FECHA_REGISTRO_GARANTIA) AIO,
				EXTRACT(MONTH FROM FECHA_REGISTRO_GARANTIA) MES,
				EXTRACT(DAY FROM FECHA_REGISTRO_GARANTIA) DIA
			  FROM CON_SUBPRODUCTOS
			), TAB_FINAL AS (
				SELECT 
			        MES,
			        COUNT(DISTINCT(NUMERO_CLIENTE)) AS NUMERO_INTERMEDIARIOS,
			        COUNT(*) AS GARANTIAS,
			        ROUND(COUNT(*)/COUNT(DISTINCT(NUMERO_CLIENTE))) PROMEDIO_GARANTIAS_X_INTERMEDARIO,
			        ROUND(SUM(MONTO_GARANTIZADO)) AS SUMA_MENSUAL_MONTO_GARANTIZADO,
			        ROUND(AVG(MONTO_GARANTIZADO)) AS PROMEDIO_MENSUAL_MONTO_GARANTIZADO_X_GARANTIA,
			        SUM(GANANCIA) AS TOTAL_MENSUAL_GANANCIA,
			        ROUND(AVG(PORCENTAJE_COMISION),4) PROMEDIO_MENSUAL_COMISION
			    FROM INFORMACION_GARANTIA
			    WHERE AIO = {año}
			    GROUP BY MES
			) SELECT * FROM TAB_FINAL ORDER BY MES DESC 
    """


if __name__ == "__main__":
    date_now = datetime.now().strftime("%d_%m_%Y") 
    list_dbs_clt_activos_productos = [db_siag]
	
	# RUTA DE DATOS DE SALIDA DATOS
    path = "/home/ale1726/proyects/datalake/clientes/data/productos"
    
    
    connection_string = f'oracle+cx_oracle://{db_siag["USER"]}:{db_siag["PSSWD"]}@{db_siag["DSN"]}'
    engine = create_engine(connection_string)
    df = pd.read_sql(querys_productos["SIAG"]["AÑOS_GARANTIAS"], con=engine)
    años = df["aio"].to_list()
    

    for database in list_dbs_clt_activos_productos:
        try:
            # DIRECTORIO PRINCIPAL CREAR SI NO EXISTE
            path_dir_sistema = os.path.join(path, database["NAME"], "datos")
            os.makedirs(path_dir_sistema, exist_ok=True)

            # DIRECTORIO DE LA FECHA QUE SE OBTIENE LA DATA
            path_exit_data= os.path.join(path_dir_sistema, date_now)
            os.makedirs(path_exit_data, exist_ok=True)
            
            if database["NAME"] == "SIAG":
                for archivo, consulta in querys_productos[database["NAME"]].items():
                     if archivo != "AÑOS_GARANTIAS":
                         print(f"Obteniendo {archivo}")
                         get_table(path_exit = path_exit_data , db = database, name_archivo = archivo , query = consulta)  
                     else:
                        path_exit_data_mensual = os.path.join(path_exit_data, "agrupado_anual")
                        os.makedirs(path_exit_data_mensual, exist_ok=True)
                        for año in años:
                            archivo =  f"resumen_{año}_mensual"
                            consulta =  query_mensual_x_año(int(año))
                            print(f"Obteniendo {archivo}")
                            get_table(path_exit = path_exit_data_mensual, db = database, name_archivo = archivo , query = consulta)
            else:
                continue
				
                        
        except Exception as error:
            # Crear carpeta de logs x sistema si no existe
            path_dir_log = os.path.join(path, database["NAME"], "logs")
            os.makedirs(path_dir_log, exist_ok = True)
            
            # Crear ruta de salida del Log
            path_log_now = os.path.join(path_dir_log, date_now)
            os.makedirs(path_log_now, exist_ok = True)
            
            # Crear log
            log_file =  os.path.join(path_log_now, f"errors_productos_{database['NAME']}_{date_now}.log")
            with open(log_file, 'a') as archivo:
                archivo.write(str(error))
                